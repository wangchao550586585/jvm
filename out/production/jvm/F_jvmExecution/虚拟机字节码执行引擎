虚拟机调用方法如下：
运行时栈帧结构
    栈帧用于支持虚拟机进行方法调用和方法执行的数据结构,他是虚拟机运行时数据区中的虚拟机栈的栈元素
    每一个方法从调用到执行完成的过程,对应一个栈帧在虚拟机里面从入栈到出栈的过程
结构如下:
局部变量表:一组变量值存储空间,用于存放方法参数和方法内部定义的局部变量,详细看Demo
操作数栈
    操作栈,后进后出,2个栈帧独立，但是有时会做一部分重叠,共享数据
动态连接
    每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态  连接
    符号引用一部分在类加载阶段或第一次使用时转化为直接引用,这种转化称为静态解析
    每次运行期间转化为直接引用,动态连接
方法返回值
    当一个方法执行2种方式退出，
        正确返回，return
        异常，在方法异常表中没有搜索到匹配异常处理器,throw
方法调用
    确定调用哪一个方法
    解析
        方法在程序真正运行之前就有一个可确定的调用版本,并且这个调用版本在运行期不可改变
        这类方法的调用称为解析,符合编译器可知,运行期不可变。主要有静态方法和私有方法,实例构造器,父类
            静态方法与类型直接关联,私有方法外部不可访问
    分派
        看DynamicDispatch/StaticDispatch/Overload/Dispatch



-----------------------
虚拟机如何执行方法里面的字节码指令
2种执行方式
    解释器执行/即时编译器产生本地代码执行
解释执行
    javac编译器完成了程序代码经过此词法分析,语法分析到抽象语法树,在遍历语法树生成线性的字节码指令流的过程
    这一部分在虚拟机之外进行,解析器在虚拟机内部实现,所以java程序的编译是半独立的实现
java编译器输出的指令流,是基于栈的指令集架构,指令流的指令大部分都是零地址,也就是不存在显式的参数,如此设计是考虑到代码可校验性,优点可移植
还有一种基于寄存器的指令集,依赖寄存器工作

